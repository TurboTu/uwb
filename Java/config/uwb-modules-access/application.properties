#context.listener.classes=com.zhilutec.uwb.netty.threadConfig.StartupEvent
#服务名,向eureka注册时的名字
spring.application.name=uwb-access
######本服务端口#########
server.port=11002
eureka.server.ip=192.168.10.232
eureka.server.port=5555

kafka.ip=192.168.10.232
kafka.port=9092
kafka.producer.topic=uwb_original_topic
kafka.consumer.topic=uwb_center_topic
#########升级文件服务器配置#####
upgrade.ip=192.168.10.232
upgrade.port=8888

redis.ip=192.168.10.232
redis.password=uwb!2018@0511_zl
redis.port=6379

############DemoOs部署###
#zookeeper地址
register.servers=192.168.10.232
env.registry.kafka=${kafka.ip}:${kafka.port}
env.registry.servers=${register.servers}

# 下面是配置undertow作为服务器的参数
# 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程
server.undertow.io-threads=4
# 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程,它的值设置取决于系统的负载
server.undertow.worker-threads=20
# 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理
# 每块buffer的空间大小,越小的空间被利用越充分
server.undertow.buffer-size=1024
# 是否分配的直接内存
server.undertow.direct-buffers=true
server.undertow.accesslog.enabled=true
server.undertow.accesslog.dir=/zldata/mia/log/uwb/accessUndertow
server.undertow.accesslog.suffix=log

#模块名
env.registry.module=mia-uwb-access
env.registry.node=1

env.registry.remote=0
env.registry.conf.remote=0
#统一控制接口前缀
server.context-path=/uwb/access
#######################################################
################logger#################################
#######################################################
#日志配置文件
#logging.config=classpath:logback-spring.xml
#######################################################
#######################Redis###########################
#######################################################
# REDIS (RedisProperties)
# Redis数据库索引（默认为0）
spring.redis.database=6
# Redis服务器地址
spring.redis.host=${redis.ip}
# Redis服务器连接端口
spring.redis.port=${redis.port}
# Redis服务器连接密码（默认为空）
spring.redis.password=${redis.password}
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.pool.max-active=100
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.pool.max-wait=-1
# 连接池中的最大空闲连接
spring.redis.pool.max-idle=20
# 连接池中的最小空闲连接
spring.redis.pool.min-idle=5
# 连接超时时间（毫秒）
spring.redis.timeout=0
spring.data.redis.repositories.enabled=true
################################################################
#################### kafka #####################################
#################### consumer ##################################
spring.kafka.consumer.bootstrapServers=${kafka.ip}:${kafka.port}
spring.kafka.consumer.topic=${kafka.consumer.topic}
#自动commmit设置
spring.kafka.consumer.autoOffsetReset=latest
#是否自动commit
spring.kafka.consumer.autoCommit=false
#自动commit间隔
spring.kafka.consumer.autoCommitInterval=1000
#分组
spring.kafka.consumer.groupId=${spring.application.name}-consumer-gid
#客户端Id
spring.kafka.consumer.clientId=${spring.application.name}-consumer-cid
#AckMode为COUNT_TIME或COUNT是限制最多未提交offset的数量
spring.kafka.consumer.ackCount=1000
#AckMode为COUNT_TIME或TIME时设置多久commit一次
spring.kafka.consumer.ackTime=2000

#消费线程的数量
spring.kafka.consumer.concurrency=2
#一次从kafka中poll出来的数据条数
#max.poll.records条数据需要在在session.timeout.ms这个时间内处理完
spring.kafka.consumer.maxPollRecords=10
#poll超时时间
spring.kafka.consumer.maxPollIntervalMs=10000
#服务端poll超时时间设置
spring.kafka.consumer.pollTimeout=300000
#是否批量消费
spring.kafka.consumer.batchListener=true
#Consumer session 过期时间。这个值必须设置在broker configuration中的group.min.session.timeout.ms 与 group.max.session.timeout.ms之间。
#默认为10000ms
spring.kafka.consumer.sessionTimeout=15000
#消息发送的最长等待时间.需大于session.timeout.ms这个时间,默认305000
spring.kafka.consumer.requestInterValMs=305000 
#server发送到消费端的最小数据，若是不满足这个数值则会等待直到满足指定大小。默认为1表示立即接收。
spring.kafka.consumer.fetchMinBytes=1
#若是不满足fetch.min.bytes时，等待消费端请求的最长等待时间
spring.kafka.consumer.fetchWaitMax=1000
#心跳间隔。心跳是在consumer与coordinator之间进行的。这个值必须设置的小于session.timeout.ms，因为：
#当Consumer由于某种原因不能发Heartbeat到coordinator时，并且时间超过session.timeout.ms时，就会认为该consumer已退出
#通常设置的值要低于session.timeout.ms的1/3。默认值是：3000 （3s）
spring.kafka.consumer.heartbeatIntervalMs=5000
#################### producer ###################################
spring.kafka.producer.bootstrapServers=${kafka.ip}:${kafka.port}
spring.kafka.producer.topic=${kafka.producer.topic}
spring.kafka.producer.listener=true
spring.kafka.producer.acks=all
spring.kafka.producer.bufferMemory=33554432
spring.kafka.producer.clientId=${spring.application.name}-producer-cid
spring.kafka.producer.compressionType=gzip
spring.kafka.producer.batchSize=16384
spring.kafka.producer.lingerMs=10
spring.kafka.producer.retries=2
spring.kafka.producer.protocol=PLAINTEXTSASL/SASL/PLAINTEXT/SASL_SSL/SSL

eureka.instance.prefer-ip-address=true
eureka.instance.instance-id=${spring.cloud.client.ipAddress}:${spring.application.name}:${server.port}
eureka.instance.lease-expiration-duration-in-seconds=60
eureka.instance.lease-renewal-interval-in-seconds=30
#eureka.client.healthcheck.enable=true
eureka.client.serviceUrl.defaultZone=http://${eureka.server.ip}:${eureka.server.port}/eureka/
